package com.gritlabstudent.user.ms;
// Generated by CodiumAI

import com.gritlabstudent.user.ms.controller.UserController;

import com.gritlabstudent.user.ms.exceptions.UserCollectionException;
import com.gritlabstudent.user.ms.models.User;
import com.gritlabstudent.user.ms.models.UserDTO;
import com.gritlabstudent.user.ms.services.UserService;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class UserControllerTest {


    // creating a new user with valid data returns a HTTP 201 response with the created user's data
    @Test
    public void test_createUser_validData_returns201Response() {
        // Arrange
        UserService userService = mock(UserService.class);
        UserController userController = new UserController(userService);
        User user = new User();
        user.setId("1");
        user.setName("John");
        user.setRole("ROLE_CLIENT");
        user.setEmail("john@example.com");
        user.setPassword("password");

        // Act
        ResponseEntity<?> response = userController.createUser(user);

        // Assert
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody() instanceof UserDTO);
    }

    // getting all users returns a HTTP 200 response with a list of all users' data
    @Test
    public void test_getAllUsers_returns200ResponseWithListOfUsers() {
        // Arrange
        UserService userService = mock(UserService.class);
        UserController userController = new UserController(userService);
        List<UserDTO> users = new ArrayList<>();
        users.add(new UserDTO("1", "John", "ROLE_CLIENT", "avatar1.jpg"));
        users.add(new UserDTO("2", "Jane", "ROLE_SELLER", "avatar2.jpg"));
        when(userService.getAllUsers()).thenReturn(users);

        // Act
        ResponseEntity<List<UserDTO>> response = userController.getAllUsers();

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(users, response.getBody());
    }

    // getting a user by ID with valid ID returns a HTTP 200 response with the user's data
    @Test
    public void test_getUserById_validId_returns200ResponseWithUserData() {
        // Arrange
        UserService userService = mock(UserService.class);
        UserController userController = new UserController(userService);
        UserDTO user = new UserDTO("1", "John", "ROLE_CLIENT", "avatar.jpg");
        when(userService.getUserById("1")).thenReturn(user);

        // Act
        ResponseEntity<UserDTO> response = userController.getUserById("1");

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals(user, response.getBody());
    }

    // creating a new user with invalid data returns a HTTP 422 response with an error message
    @Test
    public void test_createUser_invalidData_returns422ResponseWithErrorMessage() {
        // Arrange
        UserService userService = mock(UserService.class);
        UserController userController = new UserController(userService);
        User user = new User();
        user.setId("1");
        user.setName("");
        user.setRole("ROLE_CLIENT");
        user.setEmail("john@example.com");
        user.setPassword("password");

        // Act
        ResponseEntity<?> response = userController.createUser(user);

        // Assert
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody() instanceof String);
    }

    // creating a new user with an already existing name or email returns a HTTP 409 response with an error message
    @Test
    public void test_createUser_existingNameOrEmail_returns409ResponseWithErrorMessage() throws UserCollectionException, NoSuchAlgorithmException {
        // Arrange
        UserService userService = mock(UserService.class);
        UserController userController = new UserController(userService);
        User user = new User();
        user.setId("1");
        user.setName("John");
        user.setRole("ROLE_CLIENT");
        user.setEmail("john@example.com");
        user.setPassword("password");
        when(userService.createUser(user)).thenThrow(new UserCollectionException("User already exists"));

        // Act
        ResponseEntity<?> response = userController.createUser(user);

        // Assert
        assertEquals(HttpStatus.CONFLICT, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody() instanceof String);
    }

}